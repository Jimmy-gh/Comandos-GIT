Siempre se trabaja en ramas, nunca en main
git init
git add . (sube todos los archivos al staging área)
git reset . (baja todos los archivos del staging área)
git commit -m
git checkout -- . (Todos los archivos a los que se les esté haciendo seguimiento
		vuelven al estado en que se encontraban hasta el último commit)
git log
git commit --amend
git checkout -b <nombre de rama nueva> (Crea nueva rama y se cambia a ella)
git checkout <rama a cambiar>
git branch -d <rama a eliminar>(borra la rama)


git --version
git update-git-for-windows
git config --global user.name "Jimmy Villa"
git config --global user.email samgamyiklc@gmail.com
git config --global core.editor "code --wait" :agrega editor visual studio code por defecto y espera a que cierre
git config --global -e : abre archivo de configuración global
git config --global core.autocrlf true (en mac es input en vez de true)
git config -h : entrega listado con todas las configuraciones que se puede agregar
git init : inicializa repositorio dentro de esta carpeta
git status: muestra estado actual del repositorio
git status -s:muestra el status corto
code o code . : abre el editor de texto VStudio
git add <archivo>: agrega el archivo al staging area
git commit -m "mensaje": compromete el archivo y agrega mensaje descriptivo

//Crear un tag o versiones
git tag versionAlpha -m "version alpha"

//Listar tags
git tag

//borrar tags
git tag -d nombreTag

//hacer una versión en un commit anterior ej: f52f3da
git tag -a nombreTag f52f3da -m "versión alpha"

//Mostrar información del tag
git show nombreTag

Con este comando se suben los las versiones de los tags a github
git push --tags



git log
git log --oneline
git log --oneline --all --graph

git branch : muesta la rama en la cual nos encontramos
git checkout -b <nombre rama>: crea una nueva rama y se cambia a ella
git checkout <nombre rama> : se cambia a la rama
cat <archivo> : muestra el contenido del archivo
git restore --staged <archivo>:quita el archivo del staging area
git restore --staged <archivo> : remueve del staging area el archivo indicado
git restore <archivo>: elimina las modificaciones hechas al archivo
git merge <rama>: une la rama
git branch: muestra en qué rama estamos posicionados
git commit --amend: enmienda el último commit

***
Añadir archivo al último commit
Podría pasar también, que te hubieras dejado de añadir un archivo al último commit. Es cierto que podrías crear un nuevo commit pero queda más limpio si corriges el anterior. Para ello añadiríamos el o los archivos que nos hubieramos dejado en el anterior commit usando el comando “add”:

git add <fichero>
Y luego, volveríamos a repetir el “ammend”:

git commit --amend
Esto nos permitiría añadir el archivo los archivos omitidos en el commit anterior y corregir el mensaje si fuera necesario.
***
**
Reset - Revertir cambios de un commit
Que pasaría si hacemos lo contrario que en punto anterior, en vez de añadir un archivo, lo queremos eliminar. Muchas veces por error incluimos en el repositorio un archivo que no queríamos dado que contienen secretos o información importante.

Borrar del stage area
Si solo lo hemos mandado al “stage” area, podríamos quitarlo de ahí con el siguiente comando:

git reset <fichero a eliminar>
Revertir un commit
En caso de haberlo añadido al “stage area” y haber hecho un commit, podríamos revertir el cambio con el siguiente comando:

git reset --soft HEAD~1 #Revertir el último commit
git reset <archivo a eliminar> #Resturar el archivo del commiteado por error
rm <archivo a eliminar> #Eliminar el archivo del repositorio
git commit #Hacer el commit
Esto revertirá el último commit, eliminará el archivo y añadira un nuevo commit en su lugar.

Volver a un estado anterior tras muchos cambios
Podría pasar, ya en el peor de los casos, que hubieramos hecho muchos cambios mal y quisieramos volver a un estado anterior. Primero podríamos consultar el historial de commits con el comando “log” o “reflog” y ver la referencia del commit al que queremos volver:

git log
git reflog

Con la referencia del commit al que queremos volver, podemos revertir el commit con el siguiente comando:
git reset HEAD@{Referencia}

Volver al último commit rápidamente

Para volver al último commit sin tener que consultar el historial, podemos usar el comando “reset” con el parámetro “–hard”:
git reset --hard HEAD

Branch - Errores en ramas
En este apartado veremos los errores más comunes que pueden ocurrir en las ramas.

Nombre de rama equivocado
Es frecuente que con las prisas escribamos el nombre de una rama con un nombre equivocado. Aquí la solución es simple, dentro del comando branch esta el parámetro “-m” que nos permite cambiar el nombre de la rama:

git branch -m nombre-rama-equivocada nombre-rama-correcta
Commit a la rama principal
Podríamos hacer sin querer un commit en la rama principal, por ejemplo, main cuando nuestro sistema de organización es hacer ramas distintas para cada característica nueva que se desarrolla o trabajar primero en develop y luego integrar los cambios en main.

En varios pasos podríamos crear una rama con todos los cambios que acabamos de generar y luego, en el siguiente paso, resetear la rama principal al commit anterior:

git branch nombre-rama-nueva-con-los-cambios #Creamos una rama con los cambios
git reset HEAD~ --hard #Reseteamos la rama principal al commit anterior
git checkout nombre-rama-nueva-con-los-cambios #Cambiamos a la rama nueva
En el último paso, nos cambiaríamos a la rama nueva para seguir trabajando con los cambios habiendo dejado limpia la rama principal.

Eliminar secretos tanto en local como en remoto
En este apartado veremos como eliminar los secretos de un repositorio local o remoto. Es muy frecuente sin querer introducir tokens o contraseñas en un repositorio. Aunque los borremos posteriormente, estos, se mantendrán en el historial de git.

Podemos borrar un archivo de toda la historia con el siguiente comando:

 git filter-branch --force --index-filter \
  "git rm --cached --ignore-unmatch ARCHIVO-SENSIBLE" \
  --prune-empty --tag-name-filter cat -- --all
  git push --force --verbose --dry-run
  git push --force
**
git reset --hard HEAD:borra todo
git branch <nuevo_rama_main>:copia la rama main en otra nueva y deja la actual como una rama 
git branch -m testi test:renombra la rama de testi por test
pwd: nos muestra la carpeta actual en la que nos encontramos.
mkdir: nos permite crear carpetas, p. ej. mkdir NuevaCarpeta
touch: nos permite crear archivos nuevos, p.ej. touch NuevoArchivo.txt
cat: nos permite ver el contenido de un archivo, p.ej. cat NuevoArchivo.txt
cd: nos permite cambiarnos de carpeta, p.ej. cd NuevaCarpeta.
cd .. : nos permite regresar al directorio o carpeta anterior.
cd o cd ~: nos lleva a la ruta del usuario.
cd /c: nos vamos al disco C:/.
cd -: nos lleva directamente al ultimo directorio visitado.
ls: nos permite ver los archivos de la carpeta donde estamos actualmente.
ls -a: muesta all. Archivos y directorios ocultos
ls -l: Ver todos los archivos como una lista en donde incluye el usuario, grupo, permisos sobre el archivo, tamaño, fecha y hora de creación.
ls -lh: Muestra la misma información que ls-l pero con unidades de tamaño, es decir, kb o mb.
ls-R: muestra el contenido de todos los sudirectorios de forma recursiva.
ls -S Ordena los resultados por tamaño de archivo.
rm: Nos permite borrar un archivo o carpeta ej: rm NuevoArchivo.txt
rmdir “nombre del directorio”/: borrar un directorio: Solo funciona con directorios vacíos.
rm -r ‘nombre de la carpeta’ :me permite eliminar la carpeta y los archivos dentro de ella de forma recursiva.
cp “nombre del archivo que quremos copiar” “nombre del directorio a donde lo queremos copiar”: nos permite copiar un archivo.
mv “el directorio de donde queremos mover/el nombre del archivo” “el directorio hacia donde lo queremos mover”: nos permite mover un archivo.
mv también sirve para renombrar archivos moviendo de origen a destino en la misma carpeta
clear: nos permite limpiar la pantalla.
history: ver los últimos comandos que ejecutamos y un número especial con el que podemos volver a repetir el comando.